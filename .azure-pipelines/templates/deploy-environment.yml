parameters:
- name: azureSubscription
  type: string
- name: environment
  type: string
- name: environmentName
  type: string
- name: webAppsAzureSubscription
  type: string
- name: webAppsEnvironment
  type: string

stages:
- stage: deploy_${{ parameters.environmentName }}
  jobs:
  - deployment: deploy_${{ parameters.environmentName }}_platform_bicep
    environment: ${{ parameters.environment }}

    workspace:
      clean: all

    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: AzureCLI@2
              displayName: deploy_${{ parameters.environmentName }}_platform_bicep
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                addSpnToEnvironment: true
                inlineScript: |
                  $config = (Get-Content ./params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                  $deletedKeyVaults = az keyvault list-deleted --query '[].properties.vaultId' | ConvertFrom-Json
                  $isDeleted = $deletedKeyVaults | where {$_ -match "rg-platform-vault-${{ parameters.environmentName }}-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)"}

                  $keyVaultCreateMode = "default"
                  if ($isDeleted -ne $null) {
                    # To allow the environments to be torn-down and re-created, the Key Vault Create Mode must be set to 'recover'.
                    $keyVaultCreateMode = "recover"
                  }

                  $deployPrincipalId = (az ad sp show --id $env:servicePrincipalId | ConvertFrom-Json).id

                  az deployment sub create `
                    --name "geolocation-platform-${{ parameters.environmentName }}-$($config.parameters.parInstance.value)" `
                    --template-file bicep/platform.bicep `
                    --location $config.parameters.parLocation.value `
                    --parameters @params/platform.${{ parameters.environmentName }}.json `
                      parKeyVaultCreateMode=$keyVaultCreateMode `
                      parDeployPrincipalId=$deployPrincipalId

  - job: deploy_${{ parameters.environmentName }}_platform_permissions
    dependsOn: ['deploy_${{ parameters.environmentName }}_platform_bicep']

    workspace:
      clean: all

    steps:
      - task: AzureCLI@2
        displayName: CreateAppRegistrations
        inputs:
          azureSubscription: ${{ parameters.azureSubscription }}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $config = (Get-Content ./params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

            . "./scripts/CreateAppRegistration.ps1" `
                -applicationName "geolocation-api-${{ parameters.environmentName }}-$($config.parameters.parInstance.value)" `
                -appRoles "lookup-api-approles.json"

      - task: AzureCLI@2
        displayName: CreateAppRegistrationsCredentials
        inputs:
          azureSubscription: ${{ parameters.azureSubscription }}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $config = (Get-Content ./params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

            $keyVaultName = az deployment sub show --name "geolocation-platform-${{ parameters.environmentName }}-$($config.parameters.parInstance.value)" --query properties.outputs.keyVaultName.value

            . "./scripts/CreateAppRegistrationCredential.ps1" `
              -keyVaultName $keyVaultName `
              -applicationName "geolocation-api-${{ parameters.environmentName }}-$($config.parameters.parInstance.value)" `
              -secretPrefix "geolocation-api-${{ parameters.environmentName }}" `
              -secretDisplayName 'publicwebapp'

  - deployment: deploy_${{ parameters.environmentName }}_services_bicep
    dependsOn: ['deploy_${{ parameters.environmentName }}_platform_permissions']
    environment: ${{ parameters.environment }}

    workspace:
      clean: all

    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: AzureCLI@2
              displayName: deploy_${{ parameters.environmentName }}_services_bicep
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                addSpnToEnvironment: true
                inlineScript: |
                  $config = (Get-Content ./params/services.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                  az deployment group create `
                    --name "geolocation-services-${{ parameters.environmentName }}-$($config.parameters.parInstance.value)" `
                    --resource-group "rg-geolocation-${{ parameters.environmentName }}-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)" `
                    --template-file bicep/services.bicep `
                    --parameters @params/services.${{ parameters.environmentName }}.json

  - job: post_bicep_deploy_${{ parameters.environmentName }}
    dependsOn: ['deploy_${{ parameters.environmentName }}_services_bicep']

    workspace:
      clean: all

    steps:
      - task: AzureCLI@2
        name: deploy_outputs
        inputs:
          azureSubscription: ${{ parameters.webAppsAzureSubscription }}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $config = (Get-Content ./params/services.${{ parameters.environmentName }}.json | ConvertFrom-Json)

            $deploymentOutput = (az deployment group show --name "geolocation-services-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
              --resource-group "rg-geolocation-$($config.parameters.parEnvironment.value)-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)") | ConvertFrom-Json

            echo "##vso[task.setvariable variable=webAppIdentityPrincipalId;isOutput=true]$($deploymentOutput.properties.outputs.outWebAppIdentityPrincipalId.value)"
            echo "##vso[task.setvariable variable=webAppName;isOutput=true]$($deploymentOutput.properties.outputs.outWebAppName.value)"
            echo "##vso[task.setvariable variable=webApiName;isOutput=true]$($deploymentOutput.properties.outputs.outWebApiName.value)"

            echo "##vso[task.setvariable variable=webAppsResourceGroupName;isOutput=true]$($config.parameters.parStrategicServices.value.WebAppsResourceGroupName)"

      - task: AzureCLI@2
        displayName: SetPublicWebAppPermissions
        inputs:
          azureSubscription: ${{ parameters.webAppsAzureSubscription }}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $config = (Get-Content ./params/services.${{ parameters.environmentName }}.json | ConvertFrom-Json)

            $apiName = "geolocation-api-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)"
            $apiId = (az ad app list --filter "displayName eq '$apiName'" --query '[].appId') | ConvertFrom-Json
            $resourceId = (az ad sp list --filter "appId eq '$apiId'" --query '[0].id') | ConvertFrom-Json
            $apiSpn = (az rest -m GET -u https://graph.microsoft.com/v1.0/servicePrincipals/$resourceId) | ConvertFrom-Json
            $appRoleId = ($apiSpn.appRoles | Where-Object { $_.displayName -eq "LookupApiUser" }).id

            $deploymentOutput = (az deployment group show --name "geolocation-services-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
              --resource-group "rg-geolocation-$($config.parameters.parEnvironment.value)-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)") | ConvertFrom-Json

            $principalId = $deploymentOutput.properties.outputs.outWebAppIdentityPrincipalId.value
            . "./scripts/GrantPrincipalAppRole.ps1" -principalId $principalId -resourceId $resourceId -appRoleId $appRoleId

  - template: jobs/deploy-web-app.yml@ado-pipeline-templates
    parameters:
      dependsOn: ['post_bicep_deploy_${{ parameters.environmentName }}']
      environment: ${{ parameters.webAppsEnvironment }}
      projectName: lookup-webapi
      jobName: deploy_lookup_webapi
      webAppName: $[ dependencies.post_bicep_deploy_${{ parameters.environmentName }}.outputs['deploy_outputs.webApiName'] ]
      webAppNameResourceGroup: $[ dependencies.post_bicep_deploy_${{ parameters.environmentName }}.outputs['deploy_outputs.webAppsResourceGroupName'] ]
      subscription: ${{ parameters.webAppsAzureSubscription }}

  - template: jobs/deploy-web-app.yml@ado-pipeline-templates
    parameters:
      dependsOn: ['post_bicep_deploy_${{ parameters.environmentName }}']
      environment: ${{ parameters.webAppsEnvironment }}
      projectName: public-webapp
      jobName: deploy_public_webapp
      webAppName: $[ dependencies.post_bicep_deploy_${{ parameters.environmentName }}.outputs['deploy_outputs.webAppName'] ]
      webAppNameResourceGroup: $[ dependencies.post_bicep_deploy_${{ parameters.environmentName }}.outputs['deploy_outputs.webAppsResourceGroupName'] ]
      subscription: ${{ parameters.webAppsAzureSubscription }}
