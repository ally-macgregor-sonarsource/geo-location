parameters:
- name: azureSubscription
  type: string
- name: environment
  type: string
- name: environmentName
  type: string
- name: environmentTag
  type: string
- name: webAppsAzureSubscription
  type: string
- name: webAppsEnvironment
  type: string
- name: webAppsResourceGroup
  type: string


stages:
- stage: Deploy${{ parameters.environmentName }}
  jobs:
  - deployment: Deploy${{ parameters.environmentName }}PlatformBicep
    environment: ${{ parameters.environment }}

    workspace:
      clean: all

    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: AzureCLI@2
              displayName: Deploy${{ parameters.environmentName }}PlatformBicep
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                addSpnToEnvironment: true
                inlineScript: |
                  $config = (Get-Content $(Build.sourcesDirectory)/params/platform.${{ parameters.environmentTag }}.json | ConvertFrom-Json)

                  $deletedKeyVaults = az keyvault list-deleted --query '[].properties.vaultId' | ConvertFrom-Json
                  $isDeleted = $deletedKeyVaults | where {$_ -match 'rg-platform-vault-${{ parameters.environmentTag }}-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)'}

                  $keyVaultCreateMode = "default"
                  if ($isDeleted -ne $null) {
                    # To allow the environments to be torn-down and re-created, the Key Vault Create Mode must be set to 'recover'.
                    $keyVaultCreateMode = "recover"
                  }

                  $deployPrincipalId = (az ad sp show --id $env:servicePrincipalId | ConvertFrom-Json).id

                  az deployment sub create `
                    --name 'geolocationPlatform${{ parameters.environmentName }}' `
                    --template-file bicep/platform.bicep `
                    --location $config.parameters.parLocation.value `
                    --parameters @params/platform.${{ parameters.environmentTag }}.json `
                      parKeyVaultCreateMode=$keyVaultCreateMode `
                      parDeployPrincipalId=$deployPrincipalId

  - job: Deploy${{ parameters.environmentName }}PlatformPermissions
    dependsOn: ['Deploy${{ parameters.environmentName }}PlatformBicep']

    workspace:
      clean: all

    steps:
      - task: AzureCLI@2
        displayName: CreateAppRegistrations
        inputs:
          azureSubscription: ${{ parameters.azureSubscription }}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $config = (Get-Content $(Build.sourcesDirectory)/params/platform.${{ parameters.environmentTag }}.json | ConvertFrom-Json)

            . "./.azure-pipelines/scripts/functions/CreateAppRegistration.ps1" `
                -applicationName "geolocation-api-${{ parameters.environmentTag }}-$($config.parameters.parInstance.value)" `
                -appRoles "lookup-api-approles.json"

      - task: AzureCLI@2
        displayName: CreateAppRegistrationsCredentials
        inputs:
          azureSubscription: ${{ parameters.azureSubscription }}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $config = (Get-Content $(Build.sourcesDirectory)/params/platform.${{ parameters.environmentTag }}.json | ConvertFrom-Json)

            $keyVaultName = az deployment sub show --name geolocationPlatform${{ parameters.environmentName }} --query properties.outputs.keyVaultName.value

            . "./.azure-pipelines/scripts/functions/CreateAppRegistrationCredential.ps1" `
              -keyVaultName $keyVaultName `
              -applicationName "geolocation-api-${{ parameters.environmentTag }}-$($config.parameters.parInstance.value)" `
              -secretPrefix "geolocation-api-${{ parameters.environmentTag }}" `
              -secretDisplayName 'publicwebapp'

  - deployment: Deploy${{ parameters.environmentName }}ServicesBicep
    dependsOn: ['Deploy${{ parameters.environmentName }}PlatformPermissions']
    environment: ${{ parameters.environment }}

    workspace:
      clean: all

    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: AzureCLI@2
              displayName: Deploy${{ parameters.environmentName }}ServicesBicep
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                addSpnToEnvironment: true
                inlineScript: |
                  $config = (Get-Content $(Build.sourcesDirectory)/params/platform.${{ parameters.environmentTag }}.json | ConvertFrom-Json)

                  az deployment group create `
                    --name 'geolocationServices${{ parameters.environmentName }}' `
                    --resource-group 'rg-geo-location-${{ parameters.environmentTag }}-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)' `
                    --template-file bicep/services.bicep `
                    --parameters @params/services.${{ parameters.environmentTag }}.json

  - job: Deploy${{ parameters.environmentName }}ServicesPermissions
    dependsOn: ['Deploy${{ parameters.environmentName }}ServicesBicep']

    workspace:
      clean: all

    steps:
      - task: AzureCLI@2
        displayName: SetPublicWebAppPermissions
        inputs:
          azureSubscription: ${{ parameters.webAppsAzureSubscription }}
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          arguments: '"${{ parameters.environmentTag }}" "uksouth"'
          scriptPath: '$(Build.sourcesDirectory)/.azure-pipelines/scripts/SetPublicWebAppPermissions.ps1'

  - template: jobs/deploy-web-app.yml@ado-pipeline-templates
    parameters:
      dependsOn: ['Deploy${{ parameters.environmentName }}ServicesPermissions']
      environment: ${{ parameters.webAppsEnvironment }}
      projectName: lookup-webapi
      jobName: DeployLookupWebApi
      webAppName: 'webapi-geolocation-lookup-${{ parameters.environmentTag }}-uksouth'
      webAppNameResourceGroup: ${{ parameters.webAppsResourceGroup }}
      subscription: ${{ parameters.webAppsAzureSubscription }}

  - template: jobs/deploy-web-app.yml@ado-pipeline-templates
    parameters:
      dependsOn: ['Deploy${{ parameters.environmentName }}ServicesPermissions']
      environment: ${{ parameters.webAppsEnvironment }}
      projectName: public-webapp
      jobName: DeployPublicWebApp
      webAppName: 'webapp-geolocation-public-${{ parameters.environmentTag }}-uksouth'
      webAppNameResourceGroup: ${{ parameters.webAppsResourceGroup }}
      subscription: ${{ parameters.webAppsAzureSubscription }}
